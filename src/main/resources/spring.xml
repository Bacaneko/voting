<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd">




    <context:annotation-config/>
    <context:component-scan base-package="ru.bacaneco.voting.repository"/>

    <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>

    <jdbc:initialize-database enabled="${database.init}">
        <jdbc:script location="${jdbc.initLocation}"/>
        <jdbc:script location="classpath:db/populate_DB.sql"/>
    </jdbc:initialize-database>

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="org.postgresql.Driver"
          p:url="${database.url}"
          p:username="${database.username}"
          p:password="${database.password}"/>

    <jpa:repositories base-package="ru.bacaneco.voting.repository"/>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="ru.bacaneco.voting.model">

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            </bean>
        </property>

        <property name="jpaPropertyMap">
            <map>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).SHOW_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                       value="${hibernate.use_sql_comments}"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).JPA_PROXY_COMPLIANCE}" value="false"/>
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>

                <!--https://github.com/hibernate/hibernate-orm/blob/master/documentation/src/main/asciidoc/userguide/chapters/caching/Caching.adoc#caching-provider-jcache-->
                <!--                <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}"
                                       value="org.hibernate.cache.jcache.internal.JCacheRegionFactory"/>
                                <entry key="#{T(org.hibernate.cache.jcache.ConfigSettings).PROVIDER}"
                                       value="org.ehcache.jsr107.EhcacheCachingProvider"/>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}"
                                       value="false"/>--> <!--default-->
                <!--
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_ACTION}" value="drop-and-create"/>
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_CREATE_TARGET}" value="${TOPJAVA_ROOT}/config/ddl/create.ddl"/>
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_DROP_TARGET}" value="${TOPJAVA_ROOT}/config/ddl/drop.ddl"/>
                                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="create"/>
                -->
            </map>
        </property>
    </bean>

    <tx:annotation-driven/>
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <!--    Spring Web MVC-->
    <context:component-scan base-package="ru.bacaneco.voting.controller"/>

    <bean class="ru.bacaneco.voting.controller.JacksonObjectMapper" id="objectMapper" factory-method="getMapper"/>

    <bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="conversionService">
        <!--        <property name="formatters">-->
        <!--            <set>-->
        <!--                <bean class="ru.javawebinar.topjava.web.converter.DateTimeFormatters.LocalTimeFormatter"/>-->
        <!--                <bean class="ru.javawebinar.topjava.web.converter.DateTimeFormatters.LocalDateFormatter"/>-->
        <!--            </set>-->
        <!--        </property>-->
    </bean>

    <mvc:annotation-driven conversion-service="conversionService">
        <mvc:message-converters>
            <!--            Adding customized ObjectMapper to Spring MVC-->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="objectMapper"/>
            </bean>
            <!--            <bean class="org.springframework.http.converter.StringHttpMessageConverter">-->
            <!--                <property name="supportedMediaTypes">-->
            <!--                    <list>-->
            <!--                        <value>text/plain;charset=UTF-8</value>-->
            <!--                        <value>text/html;charset=UTF-8</value>-->
            <!--                    </list>-->
            <!--                </property>-->
            <!--            </bean>-->
        </mvc:message-converters>
        <!--        <mvc:argument-resolvers>-->
        <!--            <bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver "/>-->
        <!--        </mvc:argument-resolvers>-->
    </mvc:annotation-driven>

</beans>


